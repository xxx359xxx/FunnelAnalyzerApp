import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta
import numpy as np
from utils import FunnelAnalyzer, detect_anomalies
from generate_mock_data import generate_mock_data
import base64
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
import io
import tempfile
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="FunnelAnalyzerApp",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üìä FunnelAnalyzerApp")
st.markdown("### –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–æ—Ä–æ–Ω–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–π –≤ –≥–µ–º–±–ª–∏–Ω–≥–µ")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

# –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
st.sidebar.markdown("---")
st.sidebar.markdown("""
<a href="https://t.me/alkash_slayer" target="_blank">
    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm4.64 6.8c-.15 1.58-.8 5.42-1.13 7.19-.14.75-.42 1-.68 1.03-.58.05-1.02-.38-1.58-.75-.88-.58-1.38-.94-2.23-1.5-.99-.65-.35-1.01.22-1.59.15-.15 2.71-2.48 2.76-2.69a.2.2 0 00-.05-.18c-.06-.05-.14-.03-.21-.02-.09.02-1.49.95-4.22 2.79-.4.27-.76.41-1.08.4-.36-.01-1.04-.2-1.55-.37-.63-.2-1.12-.31-1.08-.66.02-.18.27-.36.74-.55 2.92-1.27 4.86-2.11 5.83-2.51 2.78-1.16 3.35-1.36 3.73-1.36.08 0 .27.02.39.12.1.08.13.19.14.27-.01.06.01.24 0 .38z" fill="#0088cc"/>
    </svg>
    Telegram
</a>
""", unsafe_allow_html=True)
st.sidebar.markdown("---")

# –í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
data_source = st.sidebar.radio(
    "–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:",
    ["–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV —Ñ–∞–π–ª", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"]
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
df = None

if data_source == "–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV —Ñ–∞–π–ª":
    uploaded_file = st.sidebar.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª",
        type=['csv'],
        help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è: user_id, registration_time, deposit_time, first_bet_time, second_deposit_time, traffic_source, country, device"
    )
    
    if uploaded_file is not None:
        try:
            df = pd.read_csv(uploaded_file)
            st.sidebar.success(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {len(df)} –∑–∞–ø–∏—Å–µ–π")
        except Exception as e:
            st.sidebar.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
else:
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    st.sidebar.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
    n_users = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", 1000, 10000, 5000, 500)
    
    if st.sidebar.button("üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"):
        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö..."):
            df = generate_mock_data(n_users)
            st.sidebar.success(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã: {len(df)} –∑–∞–ø–∏—Å–µ–π")

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
if df is not None:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    required_columns = ['user_id', 'registration_time', 'deposit_time', 'first_bet_time', 
                       'second_deposit_time', 'traffic_source', 'country', 'device']
    
    missing_columns = [col for col in required_columns if col not in df.columns]
    
    if missing_columns:
        st.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing_columns)}")
        st.stop()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
    date_columns = ['registration_time', 'deposit_time', 'first_bet_time', 'second_deposit_time']
    for col in date_columns:
        df[col] = pd.to_datetime(df[col], errors='coerce')
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    analyzer = FunnelAnalyzer(df)
    
    # –í–∫–ª–∞–¥–∫–∏
    tab1, tab2, tab3, tab4 = st.tabs(["üìä –û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö", "üîÑ –ê–Ω–∞–ª–∏–∑ –≤–æ—Ä–æ–Ω–∫–∏", "‚ö†Ô∏è –î–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π", "üìÑ –û—Ç—á–µ—Ç"])
    
    with tab1:
        st.header("üìä –û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", len(df))
        
        with col2:
            depositors = len(df[df['deposit_time'].notna()])
            st.metric("–î–µ–ø–æ–∑–∏—Ç—á–∏–∫–∏", depositors)
        
        with col3:
            bettors = len(df[df['first_bet_time'].notna()])
            st.metric("–°–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É", bettors)
        
        with col4:
            second_depositors = len(df[df['second_deposit_time'].notna()])
            st.metric("–í—Ç–æ—Ä–æ–π –¥–µ–ø–æ–∑–∏—Ç", second_depositors)
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º —Ç—Ä–∞—Ñ–∏–∫–∞")
            traffic_dist = df['traffic_source'].value_counts()
            fig_traffic = px.pie(values=traffic_dist.values, names=traffic_dist.index, 
                               title="–ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞")
            st.plotly_chart(fig_traffic, use_container_width=True)
        
        with col2:
            st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º")
            country_dist = df['country'].value_counts()
            fig_country = px.bar(x=country_dist.index, y=country_dist.values, 
                               title="–°—Ç—Ä–∞–Ω—ã")
            st.plotly_chart(fig_country, use_container_width=True)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
        st.subheader("–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
        st.dataframe(df.head(100), use_container_width=True)
    
    with tab2:
        st.header("üîÑ –ê–Ω–∞–ª–∏–∑ –≤–æ—Ä–æ–Ω–∫–∏")
        
        # –§–∏–ª—å—Ç—Ä—ã
        col1, col2, col3 = st.columns(3)
        
        with col1:
            selected_traffic = st.multiselect(
                "–ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞",
                options=df['traffic_source'].unique(),
                default=df['traffic_source'].unique()
            )
        
        with col2:
            selected_countries = st.multiselect(
                "–°—Ç—Ä–∞–Ω—ã",
                options=df['country'].unique(),
                default=df['country'].unique()
            )
        
        with col3:
            selected_devices = st.multiselect(
                "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
                options=df['device'].unique(),
                default=df['device'].unique()
            )
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        filtered_df = df[
            (df['traffic_source'].isin(selected_traffic)) &
            (df['country'].isin(selected_countries)) &
            (df['device'].isin(selected_devices))
        ]
        
        if len(filtered_df) == 0:
            st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤")
        else:
            # –ê–Ω–∞–ª–∏–∑ –≤–æ—Ä–æ–Ω–∫–∏
            funnel_metrics = analyzer.calculate_funnel_metrics(filtered_df)
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –≤–æ—Ä–æ–Ω–∫–∏
            st.subheader("üìà –ú–µ—Ç—Ä–∏–∫–∏ –≤–æ—Ä–æ–Ω–∫–∏")
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric(
                    "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Üí –î–µ–ø–æ–∑–∏—Ç",
                    f"{funnel_metrics['conversions']['reg_to_deposit']:.1f}%"
                )
            
            with col2:
                st.metric(
                    "–î–µ–ø–æ–∑–∏—Ç ‚Üí –°—Ç–∞–≤–∫–∞",
                    f"{funnel_metrics['conversions']['deposit_to_bet']:.1f}%"
                )
            
            with col3:
                st.metric(
                    "–°—Ç–∞–≤–∫–∞ ‚Üí –í—Ç–æ—Ä–æ–π –¥–µ–ø–æ–∑–∏—Ç",
                    f"{funnel_metrics['conversions']['bet_to_second_deposit']:.1f}%"
                )
            
            with col4:
                st.metric(
                    "–û–±—â–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è",
                    f"{funnel_metrics['conversions']['overall_conversion']:.1f}%"
                )
            
            # –ì—Ä–∞—Ñ–∏–∫ –≤–æ—Ä–æ–Ω–∫–∏
            st.subheader("üìä –í–æ—Ä–æ–Ω–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–π")
            
            funnel_fig = analyzer.create_funnel_chart(funnel_metrics)
            st.plotly_chart(funnel_fig, use_container_width=True)
            
            # –í—Ä–µ–º—è –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏
            st.subheader("‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏")
            
            time_data = {
                '–≠—Ç–∞–ø': ['–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Üí –î–µ–ø–æ–∑–∏—Ç', '–î–µ–ø–æ–∑–∏—Ç ‚Üí –°—Ç–∞–≤–∫–∞', '–°—Ç–∞–≤–∫–∞ ‚Üí –í—Ç–æ—Ä–æ–π –¥–µ–ø–æ–∑–∏—Ç'],
                '–í—Ä–µ–º—è (—á–∞—Å—ã)': [
                    funnel_metrics['avg_times_hours']['reg_to_deposit'] or 0,
                    funnel_metrics['avg_times_hours']['deposit_to_bet'] or 0,
                    funnel_metrics['avg_times_hours']['bet_to_second_deposit'] or 0
                ]
            }
            
            time_df = pd.DataFrame(time_data)
            fig_time = px.bar(time_df, x='–≠—Ç–∞–ø', y='–í—Ä–µ–º—è (—á–∞—Å—ã)', 
                            title="–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏")
            st.plotly_chart(fig_time, use_container_width=True)
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
            st.subheader("üéØ –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º")
            
            segment_analysis = analyzer.analyze_by_segments(filtered_df)
            
            for segment_name, segment_df in segment_analysis.items():
                st.write(f"**{segment_name.upper()}:**")
                
                # –ì—Ä–∞—Ñ–∏–∫ –∫–æ–Ω–≤–µ—Ä—Å–∏–π –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É
                fig_segment = px.bar(
                    segment_df, 
                    x='segment_value', 
                    y='reg_to_deposit_conv',
                    title=f"–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –¥–µ–ø–æ–∑–∏—Ç –ø–æ {segment_name}",
                    text='reg_to_deposit_conv'
                )
                fig_segment.update_traces(texttemplate='%{text:.1f}%', textposition='outside')
                st.plotly_chart(fig_segment, use_container_width=True)
    
    with tab3:
        st.header("‚ö†Ô∏è –î–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –∞–Ω–æ–º–∞–ª–∏–π
        col1, col2 = st.columns(2)
        
        with col1:
            anomaly_threshold = st.slider(
                "–ü–æ—Ä–æ–≥ –∞–Ω–æ–º–∞–ª–∏–∏ (%)", 
                min_value=10, 
                max_value=100, 
                value=50,
                help="–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–Ω–æ–º–∞–ª–∏–µ–π"
            )
        
        with col2:
            comparison_period = st.selectbox(
                "–ü–µ—Ä–∏–æ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è",
                ["–ü—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å", "–ü—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–µ–¥–µ–ª—è", "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü"]
            )
        
        # –î–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π
        anomalies = detect_anomalies(df, threshold=anomaly_threshold/100)
        
        if anomalies:
            st.error("üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∞–Ω–æ–º–∞–ª–∏–∏:")
            for anomaly in anomalies:
                st.warning(f"‚Ä¢ {anomaly}")
        else:
            st.success("‚úÖ –ê–Ω–æ–º–∞–ª–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        
        # –¢—Ä–µ–Ω–¥—ã –∫–æ–Ω–≤–µ—Ä—Å–∏–π –ø–æ –¥–Ω—è–º
        st.subheader("üìà –¢—Ä–µ–Ω–¥—ã –∫–æ–Ω–≤–µ—Ä—Å–∏–π")
        
        daily_metrics = analyzer.calculate_daily_metrics(df)
        
        if not daily_metrics.empty:
            fig_trends = px.line(
                daily_metrics, 
                x='date', 
                y='reg_to_deposit_conv',
                title="–ö–æ–Ω–≤–µ—Ä—Å–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Üí –¥–µ–ø–æ–∑–∏—Ç –ø–æ –¥–Ω—è–º",
                markers=True
            )
            st.plotly_chart(fig_trends, use_container_width=True)
    
    with tab4:
        st.header("üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç—á–µ—Ç–∞
        col1, col2 = st.columns(2)
        
        with col1:
            report_title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞", "–ê–Ω–∞–ª–∏–∑ –≤–æ—Ä–æ–Ω–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–π")
        
        with col2:
            report_author = st.text_input("–ê–≤—Ç–æ—Ä –æ—Ç—á–µ—Ç–∞", "Gambling Analyst")
        
        # –í—ã–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞
        include_overview = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –æ–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö", True)
        include_funnel = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –≤–æ—Ä–æ–Ω–∫–∏", True)
        include_segments = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º", True)
        include_anomalies = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –¥–µ—Ç–µ–∫—Ü–∏—é –∞–Ω–æ–º–∞–ª–∏–π", True)
        
        if st.button("üìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF –æ—Ç—á–µ—Ç", type="primary"):
            with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞..."):
                try:
                    # –°–æ–∑–¥–∞–Ω–∏–µ PDF –æ—Ç—á–µ—Ç–∞
                    pdf_buffer = analyzer.generate_pdf_report(
                        df=filtered_df if 'filtered_df' in locals() else df,
                        title=report_title,
                        author=report_author,
                        include_overview=include_overview,
                        include_funnel=include_funnel,
                        include_segments=include_segments,
                        include_anomalies=include_anomalies
                    )
                    
                    # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    st.download_button(
                        label="üíæ –°–∫–∞—á–∞—Ç—å PDF –æ—Ç—á–µ—Ç",
                        data=pdf_buffer.getvalue(),
                        file_name=f"funnel_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
                        mime="application/pdf"
                    )
                    
                    st.success("‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
                    
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")
else:
    # –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    st.info("üëÜ –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞")
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    st.markdown("""
    ## üöÄ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å FunnelAnalyzerApp:
    
    ### 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    - **CSV —Ñ–∞–π–ª**: –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –ø–æ–ª—è–º–∏ user_id, registration_time, deposit_time, first_bet_time, second_deposit_time, traffic_source, country, device
    - **–ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ**: –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    
    ### 2. –ê–Ω–∞–ª–∏–∑ –≤–æ—Ä–æ–Ω–∫–∏
    - –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–π –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏
    - –ò–∑—É—á–∏—Ç–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏
    - –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
    
    ### 3. –î–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π
    - –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π
    - –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Ç—Ä–µ–Ω–¥—ã –∫–æ–Ω–≤–µ—Ä—Å–∏–π
    
    ### 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
    - –°–æ–∑–¥–∞–π—Ç–µ PDF –æ—Ç—á–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
    - –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    
    ---
    
    **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ CSV —Ñ–∞–π–ª—É:**
    ```
    user_id,registration_time,deposit_time,first_bet_time,second_deposit_time,traffic_source,country,device
    1,2025-07-01 10:00:00,2025-07-01 12:00:00,2025-07-01 12:30:00,,google_ads,RU,mobile
    2,2025-07-01 11:00:00,,,,,organic,UA,desktop
    ...
    ```
    """)

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("**FunnelAnalyzerApp** - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–æ—Ä–æ–Ω–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–π –≤ –≥–µ–º–±–ª–∏–Ω–≥–µ | –°–æ–∑–¥–∞–Ω–æ —Å ‚ù§Ô∏è –Ω–∞ Streamlit")